defmodule Colorex.ANSI do
  @moduledoc """
  Module for generating ANSI escape sequences, similar to `IO.ANSI`.

  Generate ANSI escape sequences that display truecolor/24-bit color, or with truecolor mode off, it will find the closest 8-bit colors to match.
  """
  use Colorex.Types

  @colors Colorex.Support.parse_tsv(:code.priv_dir(:colorex) |> Path.join("ansi_colors.tsv"))
          |> Enum.map(&List.to_tuple/1)
          |> Enum.into(%{})
  @rgb Enum.map(@colors, fn {k, v} -> {k, Colorex.Parser.parse!(v)} end)

  @doc """
    Returns an ANSI escape sequence setting the foreground color.

    See `IO.ANSI` for more information

    ## Options:

    `truecolor` - whether to use the full 24-bit color spectrum, or just the standard 256 terminal colors. If you pass `truecolor: false` with a color that is not part of the 256 colors, the closest matching color will be chosen. Default: `true`

    `fast` - uses the faster color comparison algorithm if true, or the more accurate one if false. See `distance/3` for more info. Default: `true`

    ```
    iex> IO.puts(Colorex.ansi(Colorex.parse!("#1188FF")) <> "Blue text" <> IO.ANSI.reset())
    ```
  """
  @spec ansi(color :: color(), truecolor: boolean(), fast: boolean()) :: String.t()
  def ansi(color, opts \\ [truecolor: true, fast: true]) do
    opts = [truecolor: Keyword.get(opts, :truecolor, true), fast: Keyword.get(opts, :fast, true)]
    %{red: r, green: g, blue: b} = flat = color |> Colorex.flatten_alpha() |> Colorex.rgb()

    if Keyword.get(opts, :truecolor, true) do
      "\e[38;2;#{floor(r)};#{floor(g)};#{floor(b)}m"
    else
      "\e[38;5;#{closest(flat, opts)}m"
    end
  end

  @doc """
    Returns an ANSI escape sequence setting the background color.

    See `IO.ANSI` for more information

    Options:

    `truecolor` - whether to use the full 24-bit color spectrum, or just the standard 256 terminal colors. If you pass `truecolor: false` with a color that is not part of the 256 colors, the closest matching color will be chosen. Default: `true`

    `fast` - uses the faster color comparison algorithm if true, or the more accurate one if false. See `distance/3` for more info. Default: `true`

    ```
    iex> IO.puts(Colorex.ansi_background(Colorex.parse!("#1188FF")) <> "Blue background" <> IO.ANSI.reset())
    ```
  """
  @spec ansi_background(color :: color(), truecolor: boolean(), fast: boolean()) ::
          String.t()
  def ansi_background(color, opts \\ [truecolor: true, fast: true]) do
    opts = [truecolor: Keyword.get(opts, :truecolor, true), fast: Keyword.get(opts, :fast, true)]
    %{red: r, green: g, blue: b} = flat = color |> Colorex.flatten_alpha() |> Colorex.rgb()

    if Keyword.get(opts, :truecolor, true) do
      "\e[48;2;#{floor(r)};#{floor(g)};#{floor(b)}m"
    else
      "\e[48;5;#{closest(flat, opts)}m"
    end
  end

  defp closest(%Colorex.RGB{} = rgb, opts) do
    if Keyword.get(opts, :fast, true) do
      _closest(rgb)
    else
      Enum.min_by(@rgb, fn {_, v} -> Colorex.distance(v, rgb, opts) end)
      |> elem(0)
    end
  end

  [
    {"0", {{0, 17}, {0, 8}, {0, 12}}},
    {"1", {{111, 131}, {0, 48}, {0, 48}}},
    {"2", {{0, 50}, {112, 131}, {0, 49}}},
    {"3", {{105, 155}, {110, 141}, {0, 50}}},
    {"4", {{0, 49}, {0, 48}, {112, 131}}},
    {"5", {{108, 147}, {0, 48}, {109, 147}}},
    {"6", {{0, 52}, {109, 143}, {107, 154}}},
    {"7", {{170, 210}, {178, 205}, {164, 214}}},
    {"9", {{235, 255}, {0, 47}, {0, 47}}},
    {"11", {{235, 255}, {235, 255}, {0, 47}}},
    {"12", {{0, 48}, {0, 47}, {236, 255}}},
    {"17", {{0, 48}, {0, 47}, {53, 111}}},
    {"18", {{0, 48}, {0, 47}, {132, 155}}},
    {"19", {{0, 48}, {0, 47}, {156, 194}}},
    {"20", {{0, 48}, {0, 47}, {195, 235}}},
    {"22", {{0, 48}, {55, 111}, {0, 47}}},
    {"23", {{0, 48}, {48, 114}, {48, 114}}},
    {"24", {{0, 48}, {48, 114}, {115, 155}}},
    {"25", {{0, 48}, {48, 114}, {156, 194}}},
    {"26", {{0, 48}, {48, 115}, {195, 234}}},
    {"27", {{0, 48}, {48, 115}, {235, 255}}},
    {"28", {{0, 48}, {132, 155}, {0, 47}}},
    {"29", {{0, 48}, {115, 154}, {48, 114}}},
    {"30", {{0, 48}, {115, 155}, {115, 154}}},
    {"31", {{0, 48}, {115, 155}, {155, 195}}},
    {"32", {{0, 48}, {116, 154}, {196, 234}}},
    {"33", {{0, 48}, {116, 155}, {235, 255}}},
    {"34", {{0, 48}, {156, 194}, {0, 47}}},
    {"35", {{0, 48}, {155, 194}, {48, 115}}},
    {"36", {{0, 48}, {156, 194}, {116, 154}}},
    {"37", {{0, 48}, {156, 195}, {155, 194}}},
    {"38", {{0, 48}, {155, 195}, {195, 235}}},
    {"39", {{0, 48}, {156, 194}, {236, 255}}},
    {"40", {{0, 48}, {195, 234}, {0, 47}}},
    {"41", {{0, 48}, {195, 235}, {48, 115}}},
    {"42", {{0, 48}, {195, 234}, {116, 155}}},
    {"43", {{0, 48}, {196, 235}, {156, 195}}},
    {"44", {{0, 48}, {196, 234}, {196, 234}}},
    {"45", {{0, 48}, {195, 234}, {235, 255}}},
    {"46", {{0, 48}, {235, 255}, {0, 47}}},
    {"47", {{0, 48}, {236, 255}, {48, 115}}},
    {"48", {{0, 48}, {235, 255}, {116, 155}}},
    {"49", {{0, 48}, {236, 255}, {156, 194}}},
    {"50", {{0, 48}, {235, 255}, {195, 234}}},
    {"51", {{0, 48}, {235, 255}, {235, 255}}},
    {"52", {{52, 111}, {0, 47}, {0, 47}}},
    {"53", {{49, 115}, {0, 45}, {48, 114}}},
    {"54", {{49, 115}, {0, 47}, {115, 155}}},
    {"55", {{49, 115}, {0, 47}, {156, 194}}},
    {"56", {{49, 115}, {0, 47}, {195, 235}}},
    {"57", {{49, 115}, {0, 47}, {236, 255}}},
    {"58", {{48, 115}, {48, 115}, {0, 47}}},
    {"59", {{49, 115}, {63, 115}, {48, 115}}},
    {"60", {{49, 115}, {48, 114}, {116, 154}}},
    {"61", {{49, 115}, {48, 115}, {155, 195}}},
    {"62", {{49, 115}, {48, 115}, {196, 235}}},
    {"63", {{49, 115}, {48, 114}, {236, 255}}},
    {"64", {{48, 115}, {116, 155}, {0, 47}}},
    {"65", {{48, 115}, {116, 155}, {48, 114}}},
    {"66", {{49, 115}, {115, 154}, {115, 155}}},
    {"67", {{49, 115}, {116, 155}, {156, 195}}},
    {"68", {{49, 115}, {116, 154}, {196, 234}}},
    {"69", {{49, 115}, {115, 155}, {235, 255}}},
    {"70", {{48, 115}, {156, 194}, {0, 47}}},
    {"71", {{48, 115}, {156, 195}, {48, 114}}},
    {"72", {{49, 115}, {155, 194}, {115, 155}}},
    {"73", {{49, 115}, {156, 194}, {156, 194}}},
    {"74", {{49, 115}, {155, 195}, {195, 235}}},
    {"75", {{49, 115}, {156, 194}, {236, 255}}},
    {"76", {{48, 115}, {195, 234}, {0, 47}}},
    {"77", {{48, 115}, {196, 234}, {48, 114}}},
    {"78", {{49, 115}, {195, 235}, {115, 155}}},
    {"79", {{49, 115}, {195, 234}, {156, 195}}},
    {"80", {{49, 115}, {196, 234}, {196, 234}}},
    {"81", {{49, 115}, {195, 235}, {235, 255}}},
    {"82", {{48, 115}, {235, 255}, {0, 47}}},
    {"83", {{48, 115}, {235, 255}, {48, 115}}},
    {"84", {{49, 115}, {236, 255}, {116, 154}}},
    {"85", {{49, 115}, {235, 255}, {155, 195}}},
    {"86", {{49, 115}, {235, 255}, {196, 235}}},
    {"87", {{49, 115}, {236, 255}, {236, 255}}},
    {"88", {{131, 155}, {0, 47}, {0, 47}}},
    {"89", {{115, 155}, {0, 47}, {48, 115}}},
    {"90", {{116, 155}, {0, 47}, {116, 154}}},
    {"91", {{116, 155}, {0, 47}, {155, 194}}},
    {"92", {{115, 155}, {0, 47}, {195, 234}}},
    {"93", {{115, 155}, {0, 47}, {235, 255}}},
    {"94", {{115, 155}, {48, 114}, {0, 47}}},
    {"95", {{115, 155}, {48, 114}, {48, 114}}},
    {"96", {{116, 155}, {48, 115}, {115, 155}}},
    {"97", {{116, 155}, {48, 114}, {156, 194}}},
    {"98", {{116, 155}, {48, 115}, {195, 235}}},
    {"99", {{116, 155}, {48, 114}, {236, 255}}},
    {"100", {{115, 155}, {117, 154}, {0, 47}}},
    {"101", {{115, 155}, {115, 155}, {48, 114}}},
    {"102", {{116, 155}, {116, 155}, {115, 154}}},
    {"103", {{115, 155}, {115, 155}, {155, 195}}},
    {"104", {{116, 155}, {116, 154}, {196, 234}}},
    {"105", {{115, 155}, {115, 155}, {235, 255}}},
    {"106", {{115, 155}, {155, 195}, {0, 47}}},
    {"107", {{115, 155}, {156, 194}, {48, 114}}},
    {"108", {{116, 155}, {156, 194}, {115, 155}}},
    {"109", {{116, 155}, {156, 194}, {156, 194}}},
    {"110", {{115, 155}, {155, 195}, {195, 235}}},
    {"111", {{116, 155}, {156, 195}, {236, 255}}},
    {"112", {{115, 155}, {196, 234}, {0, 47}}},
    {"113", {{115, 155}, {195, 235}, {48, 114}}},
    {"114", {{116, 155}, {195, 234}, {115, 154}}},
    {"115", {{116, 155}, {195, 235}, {155, 194}}},
    {"116", {{116, 155}, {196, 234}, {195, 235}}},
    {"117", {{116, 155}, {196, 234}, {236, 255}}},
    {"118", {{115, 155}, {235, 255}, {0, 47}}},
    {"119", {{115, 155}, {236, 255}, {48, 114}}},
    {"120", {{115, 155}, {235, 255}, {115, 155}}},
    {"121", {{116, 155}, {236, 255}, {156, 194}}},
    {"122", {{115, 155}, {235, 255}, {195, 235}}},
    {"123", {{116, 155}, {235, 255}, {236, 255}}},
    {"124", {{155, 195}, {0, 47}, {0, 47}}},
    {"125", {{155, 195}, {0, 47}, {48, 115}}},
    {"126", {{155, 195}, {0, 47}, {116, 155}}},
    {"127", {{156, 195}, {0, 47}, {156, 194}}},
    {"128", {{155, 195}, {0, 47}, {195, 234}}},
    {"129", {{155, 195}, {0, 47}, {235, 255}}},
    {"130", {{155, 195}, {48, 114}, {0, 47}}},
    {"131", {{155, 195}, {48, 115}, {48, 115}}},
    {"132", {{156, 195}, {48, 114}, {116, 155}}},
    {"133", {{156, 195}, {48, 114}, {156, 195}}},
    {"134", {{156, 195}, {48, 114}, {196, 235}}},
    {"135", {{156, 195}, {48, 114}, {236, 255}}},
    {"136", {{155, 195}, {115, 154}, {0, 47}}},
    {"137", {{155, 195}, {116, 154}, {48, 114}}},
    {"138", {{155, 195}, {115, 155}, {115, 154}}},
    {"139", {{156, 195}, {115, 155}, {155, 195}}},
    {"140", {{156, 195}, {115, 155}, {196, 234}}},
    {"141", {{156, 195}, {115, 154}, {235, 255}}},
    {"142", {{155, 195}, {155, 195}, {0, 47}}},
    {"143", {{155, 195}, {155, 195}, {48, 115}}},
    {"144", {{156, 195}, {156, 194}, {116, 154}}},
    {"145", {{156, 195}, {156, 194}, {155, 194}}},
    {"146", {{156, 195}, {156, 195}, {195, 234}}},
    {"147", {{155, 195}, {155, 195}, {235, 255}}},
    {"148", {{155, 195}, {196, 235}, {0, 47}}},
    {"149", {{155, 195}, {196, 235}, {48, 115}}},
    {"150", {{156, 195}, {195, 235}, {116, 154}}},
    {"151", {{156, 195}, {195, 235}, {155, 195}}},
    {"152", {{156, 195}, {196, 235}, {196, 235}}},
    {"153", {{156, 195}, {196, 235}, {236, 255}}},
    {"154", {{155, 195}, {236, 255}, {0, 47}}},
    {"155", {{155, 195}, {236, 255}, {48, 115}}},
    {"156", {{156, 195}, {236, 255}, {116, 154}}},
    {"157", {{156, 195}, {236, 255}, {155, 195}}},
    {"158", {{156, 195}, {236, 255}, {196, 235}}},
    {"159", {{156, 195}, {236, 255}, {236, 255}}},
    {"160", {{195, 235}, {0, 47}, {0, 47}}},
    {"161", {{195, 235}, {0, 47}, {48, 115}}},
    {"162", {{196, 235}, {0, 47}, {116, 154}}},
    {"163", {{195, 235}, {0, 47}, {155, 195}}},
    {"164", {{196, 235}, {0, 47}, {196, 235}}},
    {"165", {{196, 235}, {0, 47}, {236, 255}}},
    {"166", {{195, 235}, {48, 114}, {0, 47}}},
    {"167", {{195, 235}, {48, 114}, {48, 115}}},
    {"168", {{196, 235}, {48, 115}, {116, 154}}},
    {"169", {{195, 235}, {48, 114}, {155, 194}}},
    {"170", {{195, 235}, {48, 115}, {195, 235}}},
    {"171", {{196, 235}, {48, 115}, {236, 255}}},
    {"172", {{195, 235}, {115, 155}, {0, 47}}},
    {"173", {{195, 235}, {115, 155}, {48, 115}}},
    {"174", {{196, 235}, {116, 154}, {116, 154}}},
    {"175", {{195, 235}, {115, 155}, {155, 195}}},
    {"176", {{196, 235}, {116, 154}, {196, 235}}},
    {"177", {{196, 235}, {116, 154}, {236, 255}}},
    {"178", {{195, 235}, {156, 194}, {0, 47}}},
    {"179", {{195, 235}, {156, 194}, {48, 115}}},
    {"180", {{196, 235}, {155, 194}, {116, 154}}},
    {"181", {{195, 235}, {156, 195}, {155, 194}}},
    {"182", {{195, 235}, {155, 195}, {195, 235}}},
    {"183", {{196, 235}, {155, 194}, {236, 255}}},
    {"184", {{195, 235}, {195, 234}, {0, 47}}},
    {"185", {{195, 235}, {195, 234}, {48, 115}}},
    {"186", {{196, 235}, {195, 234}, {116, 154}}},
    {"187", {{196, 235}, {196, 234}, {155, 195}}},
    {"188", {{196, 235}, {196, 234}, {196, 234}}},
    {"189", {{195, 235}, {195, 234}, {235, 255}}},
    {"190", {{195, 235}, {235, 255}, {0, 47}}},
    {"191", {{195, 235}, {235, 255}, {48, 115}}},
    {"192", {{196, 235}, {235, 255}, {116, 154}}},
    {"193", {{195, 235}, {235, 255}, {155, 194}}},
    {"194", {{195, 235}, {235, 255}, {195, 235}}},
    {"195", {{196, 235}, {235, 255}, {236, 255}}},
    {"197", {{235, 255}, {0, 47}, {48, 115}}},
    {"198", {{236, 255}, {0, 47}, {116, 154}}},
    {"199", {{236, 255}, {0, 47}, {155, 194}}},
    {"200", {{236, 255}, {0, 47}, {195, 234}}},
    {"201", {{236, 255}, {0, 47}, {235, 255}}},
    {"202", {{235, 255}, {48, 114}, {0, 47}}},
    {"203", {{235, 255}, {48, 114}, {48, 114}}},
    {"204", {{235, 255}, {48, 114}, {115, 155}}},
    {"205", {{236, 255}, {48, 115}, {156, 194}}},
    {"206", {{235, 255}, {48, 115}, {195, 235}}},
    {"207", {{236, 255}, {48, 114}, {236, 255}}},
    {"208", {{235, 255}, {115, 155}, {0, 47}}},
    {"209", {{235, 255}, {115, 155}, {48, 114}}},
    {"210", {{235, 255}, {115, 155}, {115, 155}}},
    {"211", {{236, 255}, {116, 155}, {156, 194}}},
    {"212", {{236, 255}, {116, 155}, {195, 234}}},
    {"213", {{235, 255}, {115, 155}, {235, 255}}},
    {"214", {{235, 255}, {156, 194}, {0, 47}}},
    {"215", {{235, 255}, {156, 194}, {48, 115}}},
    {"216", {{236, 255}, {156, 194}, {116, 155}}},
    {"217", {{236, 255}, {156, 195}, {156, 194}}},
    {"218", {{236, 255}, {156, 194}, {195, 234}}},
    {"219", {{236, 255}, {156, 195}, {235, 255}}},
    {"220", {{235, 255}, {195, 234}, {0, 47}}},
    {"221", {{235, 255}, {195, 234}, {48, 114}}},
    {"222", {{235, 255}, {195, 235}, {115, 155}}},
    {"223", {{236, 255}, {196, 234}, {156, 194}}},
    {"224", {{235, 255}, {195, 235}, {195, 235}}},
    {"225", {{236, 255}, {196, 234}, {236, 255}}},
    {"227", {{235, 255}, {235, 255}, {48, 115}}},
    {"228", {{236, 255}, {236, 255}, {116, 154}}},
    {"229", {{235, 255}, {235, 255}, {155, 195}}},
    {"230", {{236, 255}, {236, 255}, {196, 234}}},
    {"231", {{236, 255}, {236, 255}, {235, 255}}},
    {"232", {{0, 51}, {0, 29}, {0, 39}}},
    {"233", {{0, 59}, {0, 51}, {0, 55}}},
    {"234", {{0, 70}, {0, 60}, {0, 64}}},
    {"235", {{0, 85}, {3, 69}, {0, 77}}},
    {"236", {{0, 104}, {16, 80}, {2, 93}}},
    {"237", {{9, 122}, {27, 94}, {18, 113}}},
    {"238", {{26, 137}, {36, 110}, {30, 130}}},
    {"239", {{38, 134}, {42, 120}, {40, 132}}},
    {"240", {{46, 120}, {47, 118}, {46, 120}}},
    {"241", {{50, 116}, {74, 116}, {51, 116}}},
    {"242", {{68, 128}, {88, 123}, {72, 127}}},
    {"243", {{94, 148}, {103, 136}, {95, 148}}},
    {"244", {{110, 157}, {112, 152}, {110, 157}}},
    {"245", {{114, 156}, {115, 156}, {114, 156}}},
    {"246", {{113, 167}, {128, 163}, {113, 168}}},
    {"247", {{135, 186}, {143, 176}, {134, 190}}},
    {"248", {{150, 197}, {152, 192}, {150, 198}}},
    {"249", {{154, 196}, {155, 196}, {154, 196}}},
    {"250", {{155, 203}, {167, 201}, {152, 205}}},
    {"251", {{179, 225}, {184, 216}, {176, 233}}},
    {"252", {{191, 236}, {192, 232}, {189, 239}}},
    {"253", {{194, 236}, {195, 236}, {193, 237}}},
    {"254", {{196, 246}, {207, 243}, {191, 250}}},
    {"255", {{218, 255}, {223, 255}, {210, 255}}}
  ]
  |> Enum.each(fn {color, {{rmin, rmax}, {gmin, gmax}, {bmin, bmax}}} ->
    defp _closest(%{red: r, green: g, blue: b})
         when r >= unquote(rmin) and r <= unquote(rmax) and g >= unquote(gmin) and
                g <= unquote(gmax) and b >= unquote(bmin) and b <= unquote(bmax),
         do: unquote(color)
  end)
end
