defmodule Colorex.SpectralMix do
  @moduledoc false
  # This code is based on the code from Spectral.js by Ronald van Wijnen under the MIT License
  # Original code can be found here: https://github.com/rvanwijnen/spectral.js/blob/main/python/spectral.py

  alias Colorex.RGB
  import Colorex.Support
  @size 38
  @gamma 2.4
  @epsilon 0.00000001

  @spd_C {0.96853629, 0.96855103, 0.96859338, 0.96877345, 0.96942204, 0.97143709, 0.97541862,
          0.98074186, 0.98580992, 0.98971194, 0.99238027, 0.99409844, 0.995172, 0.99576545,
          0.99593552, 0.99564041, 0.99464769, 0.99229579, 0.98638762, 0.96829712, 0.89228016,
          0.53740239, 0.15360445, 0.05705719, 0.03126539, 0.02205445, 0.01802271, 0.0161346,
          0.01520947, 0.01475977, 0.01454263, 0.01444459, 0.01439897, 0.0143762, 0.01436343,
          0.01435687, 0.0143537, 0.01435408}
  @spd_M {0.51567122, 0.5401552, 0.62645502, 0.75595012, 0.92826996, 0.97223624, 0.98616174,
          0.98955255, 0.98676237, 0.97312575, 0.91944277, 0.32564851, 0.13820628, 0.05015143,
          0.02912336, 0.02421691, 0.02660696, 0.03407586, 0.04835936, 0.0001172, 0.00008554,
          0.85267882, 0.93188793, 0.94810268, 0.94200977, 0.91478045, 0.87065445, 0.78827548,
          0.65738359, 0.59909403, 0.56817268, 0.54031997, 0.52110241, 0.51041094, 0.50526577,
          0.5025508, 0.50126452, 0.50083021}
  @spd_Y {0.02055257, 0.02059936, 0.02062723, 0.02073387, 0.02114202, 0.02233154, 0.02556857,
          0.03330189, 0.05185294, 0.10087639, 0.24000413, 0.53589066, 0.79874659, 0.91186529,
          0.95399623, 0.97137099, 0.97939505, 0.98345207, 0.98553736, 0.98648905, 0.98674535,
          0.98657555, 0.98611877, 0.98559942, 0.98507063, 0.98460039, 0.98425301, 0.98403909,
          0.98388535, 0.98376116, 0.98368246, 0.98365023, 0.98361309, 0.98357259, 0.98353856,
          0.98351247, 0.98350101, 0.98350852}
  @spd_R {0.03147571, 0.03146636, 0.03140624, 0.03119611, 0.03053888, 0.02856855, 0.02459485,
          0.0192952, 0.01423112, 0.01033111, 0.00765876, 0.00593693, 0.00485616, 0.00426186,
          0.00409039, 0.00438375, 0.00537525, 0.00772962, 0.0136612, 0.03181352, 0.10791525,
          0.46249516, 0.84604333, 0.94275572, 0.96860996, 0.97783966, 0.98187757, 0.98377315,
          0.98470202, 0.98515481, 0.98537114, 0.98546685, 0.98550011, 0.98551031, 0.98550741,
          0.98551323, 0.98551563, 0.98551547}
  @spd_G {0.49108579, 0.46944057, 0.4016578, 0.2449042, 0.0682688, 0.02732883, 0.013606,
          0.01000187, 0.01284127, 0.02636635, 0.07058713, 0.70421692, 0.85473994, 0.95081565,
          0.9717037, 0.97651888, 0.97429245, 0.97012917, 0.9425863, 0.99989207, 0.99989891,
          0.13823139, 0.06968113, 0.05628787, 0.06111561, 0.08987709, 0.13656016, 0.22169624,
          0.32176956, 0.36157329, 0.4836192, 0.46488579, 0.47440306, 0.4857699, 0.49267971,
          0.49625685, 0.49807754, 0.49889859}
  @spd_B {0.97901834, 0.97901649, 0.97901118, 0.97892146, 0.97858555, 0.97743705, 0.97428075,
          0.96663223, 0.94822893, 0.89937713, 0.76070164, 0.4642044, 0.20123039, 0.08808402,
          0.04592894, 0.02860373, 0.02060067, 0.01656701, 0.01451549, 0.01357964, 0.01331243,
          0.01347661, 0.01387181, 0.01435472, 0.01479836, 0.0151525, 0.01540513, 0.01557233,
          0.0156571, 0.01571025, 0.01571916, 0.01572133, 0.01572502, 0.01571717, 0.01571905,
          0.01571059, 0.01569728, 0.0157002}
  @cie_cmf_X {0.00006469, 0.00021941, 0.00112057, 0.00376661, 0.01188055, 0.02328644, 0.03455942,
              0.03722379, 0.03241838, 0.02123321, 0.01049099, 0.00329584, 0.00050704, 0.00094867,
              0.00627372, 0.01686462, 0.02868965, 0.04267481, 0.05625475, 0.0694704, 0.08305315,
              0.0861261, 0.09046614, 0.08500387, 0.07090667, 0.05062889, 0.03547396, 0.02146821,
              0.01251646, 0.00680458, 0.00346457, 0.00149761, 0.0007697, 0.00040737, 0.00016901,
              0.00009522, 0.00004903, 0.00002}
  @cie_cmf_Y {0.00000184, 0.00000621, 0.00003101, 0.00010475, 0.00035364, 0.00095147, 0.00228226,
              0.00420733, 0.0066888, 0.0098884, 0.01524945, 0.02141831, 0.03342293, 0.05131001,
              0.07040208, 0.08783871, 0.09424905, 0.09795667, 0.09415219, 0.08678102, 0.07885653,
              0.0635267, 0.05374142, 0.04264606, 0.03161735, 0.02088521, 0.01386011, 0.00810264,
              0.0046301, 0.00249138, 0.0012593, 0.00054165, 0.00027795, 0.00014711, 0.00006103,
              0.00003439, 0.00001771, 0.00000722}
  @cie_cmf_Z {0.00030502, 0.00103681, 0.00531314, 0.01795439, 0.05707758, 0.11365162, 0.17335873,
              0.19620658, 0.18608237, 0.13995048, 0.08917453, 0.04789621, 0.02814563, 0.01613766,
              0.0077591, 0.00429615, 0.00200551, 0.00086147, 0.00036904, 0.00019143, 0.00014956,
              0.00009231, 0.00006813, 0.00002883, 0.00001577, 0.00000394, 0.00000158, 0.0, 0.0,
              0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
  @xyz_rgb {[3.24306333, -1.53837619, -0.49893282], [-0.96896309, 1.87542451, 0.04154303],
            [0.05568392, -0.20417438, 1.05799454]}

  def linear_to_concentration(l1, l2, t) do
    t1 = l1 * (1 - t) ** 2
    t2 = l2 * t ** 2

    t2 / (t1 + t2)
  end

  def mix(rgb1, rgb2, t \\ 0.5)

  def mix(%RGB{} = rgb1, %RGB{} = rgb2, t) do
    {r, g, b, a} = RGB.to_rgba(rgb1)
    {r2, g2, b2, a2} = RGB.to_rgba(rgb2)
    {r, g, b} = mix({r, g, b}, {r2, g2, b2}, t)
    RGB.from_rgba(rgba_tuple!(r, g, b, (a + a2) / 2))
  end

  def mix(color1, color2, t) do
    lrgb1 = srgb_to_linear(color1)
    lrgb2 = srgb_to_linear(color2)

    r1 = linear_to_reflectance(lrgb1)
    r2 = linear_to_reflectance(lrgb2)

    l1 = dotproduct(r1, @cie_cmf_Y)
    l2 = dotproduct(r2, @cie_cmf_Y)

    t = linear_to_concentration(l1, l2, t)

    Enum.map(0..(@size - 1), fn i ->
      ks =
        (1 - t) * ((1 - elem(r1, i)) ** 2 / (2 * elem(r1, i))) +
          t * ((1 - elem(r2, i)) ** 2 / (2 * elem(r2, i)))

      1 + ks - (ks ** 2 + 2 * ks) ** 0.5
    end)
    |> reflectance_to_xyz()
    |> xyz_to_srgb()
  end

  def uncompand(x) do
    if x < 0.04045, do: x / 12.92, else: ((x + 0.055) / 1.055) ** @gamma
  end

  def compand(x) do
    if x < 0.0031308, do: x * 12.92, else: 1.055 * x ** (1.0 / @gamma) - 0.055
  end

  def srgb_to_linear(srgb) do
    r = uncompand(elem(srgb, 0) / 255)
    g = uncompand(elem(srgb, 1) / 255)
    b = uncompand(elem(srgb, 2) / 255)

    {r, g, b}
  end

  def linear_to_srgb(lrgb) do
    r = compand(elem(lrgb, 0))
    g = compand(elem(lrgb, 1))
    b = compand(elem(lrgb, 2))

    {round(clamp(r, 0, 1) * 255), round(clamp(g, 0, 1) * 255), round(clamp(b, 0, 1) * 255)}
  end

  def reflectance_to_xyz(r) do
    x = dotproduct(r, @cie_cmf_X)
    y = dotproduct(r, @cie_cmf_Y)
    z = dotproduct(r, @cie_cmf_Z)

    {x, y, z}
  end

  def xyz_to_srgb(xyz) do
    r = dotproduct(elem(@xyz_rgb, 0), xyz)
    g = dotproduct(elem(@xyz_rgb, 1), xyz)
    b = dotproduct(elem(@xyz_rgb, 2), xyz)

    linear_to_srgb({r, g, b})
  end

  def spectral_upsampling(lrgb) do
    w = min(min(elem(lrgb, 0), elem(lrgb, 1)), elem(lrgb, 2))

    lrgb = {elem(lrgb, 0) - w, elem(lrgb, 1) - w, elem(lrgb, 2) - w}

    c = min(elem(lrgb, 1), elem(lrgb, 2))
    m = min(elem(lrgb, 0), elem(lrgb, 2))
    y = min(elem(lrgb, 0), elem(lrgb, 1))
    r = max(0, min(elem(lrgb, 0) - elem(lrgb, 2), elem(lrgb, 0) - elem(lrgb, 1)))
    g = max(0, min(elem(lrgb, 1) - elem(lrgb, 2), elem(lrgb, 1) - elem(lrgb, 0)))
    b = max(0, min(elem(lrgb, 2) - elem(lrgb, 1), elem(lrgb, 2) - elem(lrgb, 0)))

    {w, c, m, y, r, g, b}
  end

  def linear_to_reflectance(lrgb) do
    weights = spectral_upsampling(lrgb)

    Enum.map(0..(@size - 1), fn i ->
      max(
        @epsilon,
        elem(weights, 0) + elem(weights, 1) * elem(@spd_C, i) +
          elem(weights, 2) * elem(@spd_M, i) + elem(weights, 3) * elem(@spd_Y, i) +
          elem(weights, 4) * elem(@spd_R, i) + elem(weights, 5) * elem(@spd_G, i) +
          elem(weights, 6) * elem(@spd_B, i)
      )
    end)
    |> List.to_tuple()
  end

  def dotproduct(a, b) when is_list(a) and is_list(b) do
    Enum.zip(a, b)
    |> Enum.reduce(0, fn {x, y}, acc -> acc + x * y end)
  end

  def dotproduct([_ | _] = a, b), do: dotproduct(a, Tuple.to_list(b))
  def dotproduct(a, [_ | _] = b), do: dotproduct(Tuple.to_list(a), b)
  def dotproduct(a, b), do: dotproduct(Tuple.to_list(a), Tuple.to_list(b))
end
